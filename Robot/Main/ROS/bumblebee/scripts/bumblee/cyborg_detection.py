"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class cyborg_detection(object):
    __slots__ = ["detectSize", "data"]

    __typenames__ = ["int16_t", "double"]

    __dimensions__ = [None, ["detectSize", 3]]

    def __init__(self):
        self.detectSize = 0
        self.data = []

    def encode(self):
        buf = BytesIO()
        buf.write(cyborg_detection._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">h", self.detectSize))
        for i0 in range(self.detectSize):
            buf.write(struct.pack('>3d', *self.data[i0][:3]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != cyborg_detection._get_packed_fingerprint():
            raise ValueError("Decode error")
        return cyborg_detection._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = cyborg_detection()
        self.detectSize = struct.unpack(">h", buf.read(2))[0]
        self.data = []
        for i0 in range(self.detectSize):
            self.data.append(struct.unpack('>3d', buf.read(24)))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if cyborg_detection in parents: return 0
        tmphash = (0x7c9d47e7532303ae) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if cyborg_detection._packed_fingerprint is None:
            cyborg_detection._packed_fingerprint = struct.pack(">Q", cyborg_detection._get_hash_recursive([]))
        return cyborg_detection._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

