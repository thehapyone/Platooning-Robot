"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class arduino_in(object):
    __slots__ = ["extreme_left", "extreme_right", "left", "right", "center", "encoder_left", "encoder_right", "motorEnable", "extra_io1", "extra_io2", "distance"]

    __typenames__ = ["int16_t", "int16_t", "int16_t", "int16_t", "int16_t", "int64_t", "int64_t", "int8_t", "int16_t", "int16_t", "int16_t"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None, None, None]

    def __init__(self):
        self.extreme_left = 0
        self.extreme_right = 0
        self.left = 0
        self.right = 0
        self.center = 0
        self.encoder_left = 0
        self.encoder_right = 0
        self.motorEnable = 0
        self.extra_io1 = 0
        self.extra_io2 = 0
        self.distance = 0

    def encode(self):
        buf = BytesIO()
        buf.write(arduino_in._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">hhhhhqqbhhh", self.extreme_left, self.extreme_right, self.left, self.right, self.center, self.encoder_left, self.encoder_right, self.motorEnable, self.extra_io1, self.extra_io2, self.distance))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != arduino_in._get_packed_fingerprint():
            raise ValueError("Decode error")
        return arduino_in._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = arduino_in()
        self.extreme_left, self.extreme_right, self.left, self.right, self.center, self.encoder_left, self.encoder_right, self.motorEnable, self.extra_io1, self.extra_io2, self.distance = struct.unpack(">hhhhhqqbhhh", buf.read(33))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if arduino_in in parents: return 0
        tmphash = (0xa271bb88e9200a90) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if arduino_in._packed_fingerprint is None:
            arduino_in._packed_fingerprint = struct.pack(">Q", arduino_in._get_hash_recursive([]))
        return arduino_in._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

